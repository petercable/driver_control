apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

group = 'com.raytheon.ooi'
version = '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def parser = new File(projectDir.toString() + '/lib/preload/parse_preload.py')
def workDir = new File(projectDir.toString() + "/workDir")
def logDir = new File(projectDir.toString() + "/logs")
def db = new File(workDir.toString() + '/preload.db')

mainClassName = "com.raytheon.ooi.driver_control.Main"
applicationDefaultJvmArgs = ['-DworkDir=' + workDir]

repositories {
    mavenCentral()
}
dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.7'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    compile group: 'org.zeromq', name: 'jeromq', version: '0.3.4'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.13'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.0.6'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.15-M1'
    compile group: 'org.commonjava.googlecode.markdown4j', name: 'markdown4j', version: '2.2-cj-1.0'

    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.10-FINAL'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.0'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.12'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.12'


}

jar {
    // this line below will make a "fat" jar
    //from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest { attributes 'Main-Class': 'com.raytheon.ooi.driver_control.Main' }
}

run {
    if (project.hasProperty("appArgs"))
        args Eval.me(appArgs)
}

task checkEnv << {
    if (System.getenv("TEST_BASE") == null)
        throw new Exception('Missing required environment variable TEST_BASE')
    if (System.getenv("VIRTUAL_ENV") == null)
        throw new Exception('Missing required environment variable TEST_BASE')
}

task findMI(type:Exec) {
    commandLine 'find', System.getenv("HOME"), '-type', 'd', '-name', 'marine_integrations'
}

task makeWorkDir << {
    mkdir(workDir)
}

task cleanWork(type:Delete) {
    delete workDir, logDir
}

task clone_preload(type:Exec) {
    commandLine 'git', 'submodule', 'update', '--init'
    doLast {
        println 'Cloning submodule preload_parser'
    }
}

task preload(type:Exec, dependsOn:[clone_preload, makeWorkDir]) {
    workingDir workDir
    commandLine 'python', parser.toString()
    doLast {
        println 'Generating preload database'
    }
}

clone_preload.onlyIf { !parser.exists() }
preload.onlyIf { !db.exists() }
run.dependsOn([preload])
clean.dependsOn(cleanWork)
